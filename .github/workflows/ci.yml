name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Lint with pre-commit
        uses: pre-commit/action@v2.0.0

  static:
    runs-on: ubuntu-latest
    container: node:14
    needs: [lint]

    steps:
      - uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: v1-npm-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: v1-npm-deps-
      - run: npm ci --no-optional --no-audit --progress=false

      # Build static files
      - name: Build static files
        run: npm run build:prod

      - name: Upload static_compiled
        uses: actions/upload-artifact@v2
        with:
          name: static_compiled
          path: drnalpha/static_compiled

  python:
    runs-on: ubuntu-latest
    container: python:3.8
    needs: [lint, static]

    env:
      # Run tests with the production settings.
      DJANGO_SETTINGS_MODULE: drnalpha.settings.production

      # SECRET_KEY is required by Django to start.
      SECRET_KEY: fake_secret_key_to_run_tests

      # This is the URL used by databases on our CI.
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres

      # Don't redirect to HTTPS in tests.
      SECURE_SSL_REDIRECT: 'false'

    # Service container for postgres
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2

      - name: Install Poetry
        run: pip install poetry
      - name: Cache virtualenv
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            poetry-
      - run: poetry install

      # Tests for Python
      # We need to run the collectstatic command, because we use ManifestStaticFilesStorage.
      # Otherwise the check command will fail
      - name: Download static_compiled
        uses: actions/download-artifact@v2
        with:
          name: static_compiled
          path: drnalpha/static_compiled
      - run: poetry run python manage.py collectstatic --verbosity 0 --noinput --clear

      # Run system checks
      - run: poetry run python manage.py check

      # Check for missing migrations
      - run: poetry run python manage.py makemigrations --check --noinput

      # Create cache table.
      - run: poetry run python manage.py createcachetable

      # Run back-end tests
      - run: poetry run python manage.py test --settings drnalpha.settings.test
